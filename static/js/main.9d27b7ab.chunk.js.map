{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js","components/FeedbackOptions/style.module.css","App.module.css"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","className","style","map","option","onClick","Statistics","props","good","neutral","bad","total","positivePercentage","Notification","message","App","state","bind","intent","this","setState","Object","assign","values","reduce","x","y","totalFeedbackCount","countTotalFeedback","Math","round","styles","main","countPositiveFeedbackPercentage","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"wQAaeA,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,gCACE,6BAAKD,IACJC,M,gBCaUC,EAfS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,qBAAKC,UAAWC,IAAMH,QAAtB,SACGA,EAAQI,KAAI,SAACC,GAAD,OACX,wBAAQC,QAAS,kBAAML,EAAgBI,IAAvC,SAAiDA,UCe1CE,EApBI,SAACC,GAClB,OACE,qCACE,uCAAUA,EAAMC,QAChB,0CAAaD,EAAME,WACnB,sCAASF,EAAMG,OACf,wCAAWH,EAAMI,SACjB,oDAAuBJ,EAAMK,mBAA7B,WCDSC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,K,gBC+D3BC,E,kDAzDb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CACXR,KAAM,EACNC,QAAS,EACTC,IAAK,GAEP,EAAKV,gBAAkB,EAAKA,gBAAgBiB,KAArB,gBAPN,E,mDAUnB,SAAgBC,GACdC,KAAKC,SACHC,OAAOC,OAAO,GAAIH,KAAKH,MAAvBK,OAAA,IAAAA,CAAA,GAAiCH,EAASC,KAAKH,MAAME,GAAU,O,gCAInE,WACE,OAAOG,OAAOE,OAAOJ,KAAKH,OAAOQ,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,O,6CAGxD,WACE,IAAMC,EAAqBR,KAAKS,qBAChC,OAA2B,IAAvBD,GACoB,IAApBR,KAAKH,MAAMR,KADsB,EAG9BqB,KAAKC,MAAOX,KAAKH,MAAMR,KAAOmB,EAAsB,O,oBAG7D,WACE,IAAMhB,EAAQQ,KAAKS,qBAEnB,OACE,sBAAK3B,UAAW8B,IAAOC,KAAvB,UACE,cAAC,EAAD,CAASpC,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBmB,KAAKnB,oBAI1B,eAAC,EAAD,CAASJ,MAAM,aAAf,UACa,IAAVe,GAAe,cAAC,EAAD,CAAcG,QAAQ,sBACrCH,EAAQ,GACP,cAAC,EAAD,CACEH,KAAMW,KAAKH,MAAMR,KACjBC,QAASU,KAAKH,MAAMP,QACpBC,IAAKS,KAAKH,MAAMN,IAChBC,MAAOA,EACPC,mBAAoBO,KAAKc,8C,GAjDrBC,IAAMC,WCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,QAAU,yB,kBCA5BD,EAAOC,QAAU,CAAC,KAAO,qB","file":"static/js/main.9d27b7ab.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => (\n  <div>\n    <h2>{title}</h2>\n    {children}\n  </div>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import PropTypes from \"prop-types\";\nimport style from './style.module.css'\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <div className={style.options}>\n      {options.map((option) => (\n        <button onClick={() => onLeaveFeedback(option)}>{option}</button>\n      ))}\n    </div>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from \"prop-types\";\n\nconst Statistics = (props) => {\n  return (\n    <>\n      <p>Good: {props.good}</p>\n      <p>Neutral: {props.neutral}</p>\n      <p>Bad: {props.bad}</p>\n      <p>Total: {props.total}</p>\n      <p>Positive feedback: {props.positivePercentage}%</p>\n    </>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React from \"react\";\nimport Section from \"./components/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\nimport Notification from \"./components/Notification\";\nimport styles from \"./App.module.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n    };\n    this.onLeaveFeedback = this.onLeaveFeedback.bind(this);\n  }\n\n  onLeaveFeedback(intent) {\n    this.setState(\n      Object.assign({}, this.state, { [intent]: this.state[intent] + 1 })\n    );\n  }\n\n  countTotalFeedback() {\n    return Object.values(this.state).reduce((x, y) => x + y);\n  }\n\n  countPositiveFeedbackPercentage() {\n    const totalFeedbackCount = this.countTotalFeedback();\n    if (totalFeedbackCount === 0) return 0;\n    if (this.state.good === 0) return 0;\n\n    return Math.round((this.state.good / totalFeedbackCount) * 100);\n  }\n\n  render() {\n    const total = this.countTotalFeedback();\n\n    return (\n      <div className={styles.main}>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={[\"good\", \"neutral\", \"bad\"]}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {total === 0 && <Notification message=\"No feedback given\" />}\n          {total > 0 && (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={total}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options\":\"style_options__3xebY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__3ZkGI\"};"],"sourceRoot":""}